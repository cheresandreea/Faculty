subset(L,S)
main(L, R):-
findall(S, subset(L, S), R)

subset(l1l2l3...ln) = {0/, n=0
			l1 U subset(l2l3..ln), n>0
			subset(l2..ln), n>0
			}

perm(l1..ln) = {0/, n = 0
		insert(l1, perm(l2..ln))

insert(e, l1l2...ln) = {e U l1l2..ln
			l1 U insertEL(e, l2...ln)
			}

Given a list L, generate a list of all arangements of k elements that have product P and sum S.
Ex. L = [1, 2, 3, 10], k = 2, P = 30, S = 13, R = [[3, 10], [10, 3]]

sum(l1l2..ln) = {0, n = 0
		l1 + sum(l2..ln)
		}

product(l1l2..ln) = {1, n = 0
			l1 * product(l2..ln)
			}

condition(l1l2...ln, S, P) {True, if sum(l1..ln) = S and product(l1..ln) = P
				False, otherwise
				}

ArK(l1..ln, k){l1, n >= 1 and k = 1
		Ark(l2...ln, k), if n > 1 and k >= 1
		insertEL(l1, Ark(l2...ln, k - 1)), k > 1 and and n > 1
		}


solver(L, k, S, P) = { if a1..ak = ArK(l1..ln) and condition(a1..ak, S, P)
			}


%sum(L - list, S - sum) 
%flow model (i, o), (i, i)
sum([], 0).
sum([H|T], R):-
	sum(T, RT),
    R is H + RT.

%product(L - list, P - product)
%flow model (i, o), (i, i)
product([], 1).
product([H|T], R):-
    product(T, RT),
    R is H * RT.

%condition(L - list, S - sum, P - product)
%flow model (i,i,i)
contition(L, S, P):-
    sum(L, S),
    product(L, P).

%insert(L - list, E - el, R - output)
%flow model (i ,i , o)
insertEL(L, E, [E|L]).
insertEL([H|T], E, R):-
    insertEL(T, E, RT),
    R = [H|RT].

%ArK(L - list, k, R - result output)
%flow model (i,i,o)
ArK([H|_], 1, [H]).
ArK([H|T], k, R):-
    ArK(T, k, R).
ArK([H|T], k, R):-
    k > 1, k1 is k - 1,
    ArK(T, k1, RT),
    insertEL(RT, H, R).

%solver(L - list, k, S - sum, P - product, R - output)
%flow model (i,i,i,o)
solver(L, k, S, P, R):-
    ArK(L, k, AR),
    condition(AR, S, P),
    R = AR.

main(L, k, S, P, R):-findall(X, solver(L, k, S, P, X),R)).

/////////////////////////////////////////////////////////////////////
Given  sequence of distinct numbers, compute all subsequences with a valley output
ex. [5,3,4,2,7,11,1,8,6]
some sol: [5,4,3,11], [3,2,1,4,5,7,8], [11,6,1,3,4,5]

%solve(L - list, R - output)
%flow model(i,o)

solve(L, R):-
	subset(L,S),
    perm(S,P),
    valley(P),
    R = P.


%main(L,R):-
	findall(Z, solve(L,Z),R).






